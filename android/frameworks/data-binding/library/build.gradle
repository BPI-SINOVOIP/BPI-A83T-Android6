/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    dependencies {
        classpath "com.android.tools.build:gradle:${config.androidPluginVersion}"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'android/databinding/DataBinderMapper.class'
    }
}

configurations {
    jarArchives
}


dependencies {
    compile 'com.android.support:support-v4:21.0.3'
    compile project(':baseLibrary')
}

//create jar tasks
android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def suffix = name.capitalize()

    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
        source variant.javaCompile.source + project(":baseLibrary").tasks['compileJava'].source
        classpath = files(variant.javaCompile.classpath.files) + files(
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    }

    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
    javadocJarTask.dependsOn javadocTask

    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs + project(":baseLibrary").sourceSets.main.java.srcDirs
    }

    artifacts.add('archives', javadocJarTask);
    artifacts.add('archives', sourcesJarTask);
}
uploadArchives {
    repositories {
        mavenDeployer {
            pom.artifactId = 'library'
            pom.project {
                licenses {
                    license {
                        name config.licenseName
                        url config.licenseUrl
                        distribution config.licenseDistribution
                    }
                }
            }
        }
    }
}


afterEvaluate {
    tasks['packageReleaseJar'].exclude('android/databinding/DataBinderMapper.*')
    tasks['packageReleaseJar'].exclude('android/databinding/DataBindingComponent.*')
    tasks['packageDebugJar'].exclude('android/databinding/DataBinderMapper.*')
    tasks['packageDebugJar'].exclude('android/databinding/DataBindingComponent.*')
}

task prebuildAar(type : Copy) {
    dependsOn uploadArchives
    from "$buildDir/outputs/aar/library-release.aar"
    into config.prebuildFolder
    rename { String fileName ->
        "databinding-library.aar"
    }
}